// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backend/pkg/models"
	sql "database/sql"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// AllArticles mocks base method.
func (m *MockDBInterface) AllArticles() ([]models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllArticles")
	ret0, _ := ret[0].([]models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllArticles indicates an expected call of AllArticles.
func (mr *MockDBInterfaceMockRecorder) AllArticles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllArticles", reflect.TypeOf((*MockDBInterface)(nil).AllArticles))
}

// Connection mocks base method.
func (m *MockDBInterface) Connection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockDBInterfaceMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockDBInterface)(nil).Connection))
}

// CreateArticle mocks base method.
func (m *MockDBInterface) CreateArticle(article *models.Article) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", article)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockDBInterfaceMockRecorder) CreateArticle(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockDBInterface)(nil).CreateArticle), article)
}

// CreateTable mocks base method.
func (m *MockDBInterface) CreateTable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTable")
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDBInterfaceMockRecorder) CreateTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDBInterface)(nil).CreateTable))
}

// OneArticle mocks base method.
func (m *MockDBInterface) OneArticle(id int) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneArticle", id)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneArticle indicates an expected call of OneArticle.
func (mr *MockDBInterfaceMockRecorder) OneArticle(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneArticle", reflect.TypeOf((*MockDBInterface)(nil).OneArticle), id)
}

// MockUtilityInterface is a mock of UtilityInterface interface.
type MockUtilityInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUtilityInterfaceMockRecorder
}

// MockUtilityInterfaceMockRecorder is the mock recorder for MockUtilityInterface.
type MockUtilityInterfaceMockRecorder struct {
	mock *MockUtilityInterface
}

// NewMockUtilityInterface creates a new mock instance.
func NewMockUtilityInterface(ctrl *gomock.Controller) *MockUtilityInterface {
	mock := &MockUtilityInterface{ctrl: ctrl}
	mock.recorder = &MockUtilityInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilityInterface) EXPECT() *MockUtilityInterfaceMockRecorder {
	return m.recorder
}

// ReadJSON mocks base method.
func (m *MockUtilityInterface) ReadJSON(w http.ResponseWriter, r *http.Request, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSON", w, r, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON.
func (mr *MockUtilityInterfaceMockRecorder) ReadJSON(w, r, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*MockUtilityInterface)(nil).ReadJSON), w, r, data)
}

// WriteJSON mocks base method.
func (m *MockUtilityInterface) WriteJSON(w http.ResponseWriter, status int, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSON", w, status, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON.
func (mr *MockUtilityInterfaceMockRecorder) WriteJSON(w, status, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSON", reflect.TypeOf((*MockUtilityInterface)(nil).WriteJSON), w, status, data)
}
